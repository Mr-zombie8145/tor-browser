#!/bin/sh
[% c("var/set_default_env") -%]
distdir=/var/tmp/dist/[% project %]
mkdir -p /var/tmp/dist
tar -C /var/tmp/dist -xf [% c('input_files_by_name/cmake') %]
export PATH="/var/tmp/dist/cmake/bin:$PATH"
tar -C /var/tmp/dist -xf [% c('input_files_by_name/prev_rust') %]
cd /var/tmp/dist/rust-[% c('prev_version') %]-[% c('arch') %]-unknown-linux-gnu
./install.sh --prefix=$distdir-rust-old
export PATH="$distdir-rust-old/bin:$PATH"

[% IF c("var/linux") %]
  cd $rootdir
  tar -C /var/tmp/dist -xf [% c('input_files_by_name/gcc') %]
  cd /var/tmp/dist/gcc/bin
  # We need to compile the bundled LLVM and it wants to use `cc` as the C
  # compiler. However, we don't have that in our compiled GCC resulting in weird
  # errors due to C and C++ compiler mismatch. We avoid that with this symlink.
  # We need to build our own GCC in the first place as 4.7.2 is too old to get
  # all the Rust pieces compiled.
  ln -s gcc cc
  export PATH="/var/tmp/dist/gcc/bin:$PATH"
  [% IF c("var/osname") == "linux-i686" -%]
    export LD_LIBRARY_PATH="/var/tmp/dist/gcc/lib"
  [% ELSE -%]
    export LD_LIBRARY_PATH="/var/tmp/dist/gcc/lib64"
  [% END -%]
[% END -%]

cd $rootdir
mkdir /var/tmp/build
tar -C /var/tmp/build -xf  [% c('input_files_by_name/rust') %]
cd /var/tmp/build/rustc-[% c('version') %]-src

[% IF c("var/linux") %]
  # binaryen hardcodes /usr/bin/cc and /usr/bin/c++ as the C and C++ compiler.
  # But that is too old on Debian Wheezy which is why we need to patch it, so
  # we can use our own GCC instead.
  patch -p1 < $rootdir/binaryen.patch
[% END %]

mkdir build
cd build
../configure --prefix=$distdir [% c("var/configure_opt") %]
make -j[% c("buildconf/num_procs") %]
make install
cd /var/tmp/dist
[% c('tar', {
        tar_src => [ project ],
        tar_args => '-czf ' _ dest_dir _ '/' _ c('filename'),
        }) %]
